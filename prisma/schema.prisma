generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  birthdate     DateTime?
  gender        String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  bio           String?
  occupation    String?
  country       String?
  city          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  conversationsIds String[]       @db.ObjectId
  conversations    Conversation[] @relation(fields: [conversationsIds], references: [id])

  messages Message[]
  accounts Account[]

  invitationsSent     Invitation[] @relation("InvitationSender")
  invitationsReceived Invitation[] @relation("InvitationReceiver")

  blockedMe   Block[] @relation("BlockedMe")
  blockedByMe Block[] @relation("BlockedByMe")

  userSignal1 Signal[] @relation("user1")
  userSignal2 Signal[] @relation("user2")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Invitation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  senderId String @db.ObjectId
  sender   User   @relation("InvitationSender", fields: [senderId], references: [id], onDelete: Cascade)

  receiverId String @db.ObjectId
  receiver   User   @relation("InvitationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  status    STATUS   @default(PENDING)
  createdAt DateTime @default(now())
}

model Conversation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  status    String @default("active")
  conversationBlockedBy String @default("")

  participantsIds String[] @db.ObjectId
  participants    User[]   @relation(fields: [participantsIds], references: [id])

  messages Message[]
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Block {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  blockerId String @db.ObjectId
  blocker   User   @relation("BlockedMe", fields: [blockerId], references: [id], onDelete: Cascade)

  blockedId String @db.ObjectId
  blocked   User   @relation("BlockedByMe", fields: [blockedId], references: [id], onDelete: Cascade)
}

model Signal {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  iduser1   String   @db.ObjectId
  user1     User     @relation("user1", fields: [iduser1], references: [id], onDelete: Cascade)
  iduser2   String   @db.ObjectId
  receiver  User     @relation("user2", fields: [iduser2], references: [id], onDelete: Cascade)
  raison    String
}

enum STATUS {
  PENDING
  ACCEPTED
  REJECTED
}
